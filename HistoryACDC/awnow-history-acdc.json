[
    {
        "id": "0ab4c31e738063f1",
        "type": "switch",
        "z": "c7d463cf3de6d986",
        "name": "Auth",
        "property": "auth",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 240,
        "wires": [
            [
                "59fabd37abf11518"
            ],
            [
                "9ea6070ae54237ee"
            ]
        ]
    },
    {
        "id": "be84bbf422dbc19c",
        "type": "http response",
        "z": "c7d463cf3de6d986",
        "name": "",
        "statusCode": "403",
        "headers": {},
        "x": 860,
        "y": 160,
        "wires": []
    },
    {
        "id": "59fabd37abf11518",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "name": "clear payload",
        "func": "msg.payload = \"Sorry we are not providing data\"\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 160,
        "wires": [
            [
                "be84bbf422dbc19c"
            ]
        ]
    },
    {
        "id": "41e472c759d1de59",
        "type": "group",
        "z": "c7d463cf3de6d986",
        "name": "for each call get caller and infos",
        "style": {
            "fill": "#ffff7f",
            "label": true,
            "color": "#000000",
            "label-position": "se"
        },
        "nodes": [
            "fdef053e8af1ffc5",
            "a74bfd572bb68e7e",
            "a4a97e990f247552",
            "94abb881444fc2ab",
            "104c16f39c7d9573",
            "abb9249b894a8e27",
            "4323299913e52e79",
            "20f7a23965a6a3a8"
        ],
        "x": 714,
        "y": 379,
        "w": 452,
        "h": 370
    },
    {
        "id": "fdef053e8af1ffc5",
        "type": "MSSQL",
        "z": "c7d463cf3de6d986",
        "g": "41e472c759d1de59",
        "mssqlCN": "",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "query",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1020,
        "y": 580,
        "wires": [
            [
                "a4a97e990f247552"
            ]
        ]
    },
    {
        "id": "a74bfd572bb68e7e",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "g": "41e472c759d1de59",
        "name": "check call",
        "func": "msg.query = `SELECT * FROM UCC_SipMap WHERE id = '` + msg.calllist[msg.counter].callersipmapid + `'` ;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 580,
        "wires": [
            [
                "fdef053e8af1ffc5"
            ]
        ]
    },
    {
        "id": "a4a97e990f247552",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "g": "41e472c759d1de59",
        "name": "save caller",
        "func": "msg.time = msg.calllist[msg.counter].starttime\nmsg.calllist[msg.counter].caller = msg.payload[0].uri.slice(4)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 640,
        "wires": [
            [
                "94abb881444fc2ab"
            ]
        ]
    },
    {
        "id": "94abb881444fc2ab",
        "type": "moment",
        "z": "c7d463cf3de6d986",
        "g": "41e472c759d1de59",
        "name": "",
        "topic": "",
        "input": "time",
        "inputType": "msg",
        "inTz": "ETC/utc",
        "adjAmount": 0,
        "adjType": "days",
        "adjDir": "add",
        "format": "DD.MM.YYYY kk:mm:ss",
        "locale": "de-DE",
        "output": "time",
        "outputType": "msg",
        "outTz": "ETC/utc",
        "x": 1040,
        "y": 640,
        "wires": [
            [
                "104c16f39c7d9573"
            ]
        ]
    },
    {
        "id": "104c16f39c7d9573",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "g": "41e472c759d1de59",
        "name": "save time",
        "func": "msg.calllist[msg.counter].starttime = msg.time\n\nmsg.counter = msg.counter + 1\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 700,
        "wires": [
            [
                "abb9249b894a8e27"
            ]
        ]
    },
    {
        "id": "abb9249b894a8e27",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "g": "41e472c759d1de59",
        "name": "check each call",
        "func": "if (msg.counter == msg.calllist.length) { msg.result = \"finish\"; }\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 500,
        "wires": [
            [
                "4323299913e52e79"
            ]
        ]
    },
    {
        "id": "4323299913e52e79",
        "type": "switch",
        "z": "c7d463cf3de6d986",
        "g": "41e472c759d1de59",
        "name": "check counter",
        "property": "result",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "finish",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1020,
        "y": 500,
        "wires": [
            [
                "5953109bb4531f5f"
            ],
            [
                "a74bfd572bb68e7e"
            ]
        ]
    },
    {
        "id": "20f7a23965a6a3a8",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "g": "41e472c759d1de59",
        "name": "Start round",
        "func": "msg.counter = 0\nmsg.calllist = msg.payload\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 420,
        "wires": [
            [
                "abb9249b894a8e27"
            ]
        ]
    },
    {
        "id": "08ecca0bbf2f01d7",
        "type": "group",
        "z": "c7d463cf3de6d986",
        "name": "get list of calls for this agent",
        "style": {
            "fill": "#7fb7df",
            "label": true,
            "label-position": "ne",
            "color": "#000000"
        },
        "nodes": [
            "1be52b5d31dd1d50",
            "6c571b7af1790855",
            "59d88b6dfc5c5f96",
            "9ea6070ae54237ee"
        ],
        "x": 714,
        "y": 219,
        "w": 452,
        "h": 142
    },
    {
        "id": "1be52b5d31dd1d50",
        "type": "MSSQL",
        "z": "c7d463cf3de6d986",
        "g": "08ecca0bbf2f01d7",
        "mssqlCN": "",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "query",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1060,
        "y": 320,
        "wires": [
            [
                "20f7a23965a6a3a8"
            ]
        ]
    },
    {
        "id": "6c571b7af1790855",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "g": "08ecca0bbf2f01d7",
        "name": "get call list last 14 days",
        "func": "var agent = msg.payload[0].id\n\nmsg.query = `\n    SELECT  TOP 20 * \n    FROM UCC_SessionSummary \n    WHERE starttime >= DATEADD(DAY, -14, CAST(GETDATE() AS DATE)) \n    AND initialagentsipmapid LIKE '${agent}'\n    ORDER BY starttime DESC\n`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 320,
        "wires": [
            [
                "1be52b5d31dd1d50"
            ]
        ]
    },
    {
        "id": "59d88b6dfc5c5f96",
        "type": "MSSQL",
        "z": "c7d463cf3de6d986",
        "g": "08ecca0bbf2f01d7",
        "mssqlCN": "",
        "name": "",
        "outField": "payload",
        "returnType": 0,
        "throwErrors": 1,
        "query": "",
        "modeOpt": "queryMode",
        "modeOptType": "query",
        "queryOpt": "query",
        "queryOptType": "msg",
        "paramsOpt": "queryParams",
        "paramsOptType": "none",
        "rows": "rows",
        "rowsType": "msg",
        "parseMustache": true,
        "params": [],
        "x": 1060,
        "y": 260,
        "wires": [
            [
                "6c571b7af1790855"
            ]
        ]
    },
    {
        "id": "9ea6070ae54237ee",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "g": "08ecca0bbf2f01d7",
        "name": "get user id",
        "func": "var name = \"sip:\" + msg.user\n\n\nmsg.query = `SELECT * FROM UCC_SipMap WHERE uri = '` + name + `'`;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 260,
        "wires": [
            [
                "59d88b6dfc5c5f96"
            ]
        ]
    },
    {
        "id": "0a5ce3b7af053e0f",
        "type": "group",
        "z": "c7d463cf3de6d986",
        "name": "get request ",
        "style": {
            "fill": "#b797cf",
            "label": true,
            "color": "#000000"
        },
        "nodes": [
            "beb727a76cca94d3",
            "0081344e6a3a2290"
        ],
        "x": 54,
        "y": 199,
        "w": 392,
        "h": 82
    },
    {
        "id": "beb727a76cca94d3",
        "type": "http in",
        "z": "c7d463cf3de6d986",
        "g": "0a5ce3b7af053e0f",
        "name": "",
        "url": "/history",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 240,
        "wires": [
            [
                "0081344e6a3a2290"
            ]
        ]
    },
    {
        "id": "0081344e6a3a2290",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "g": "0a5ce3b7af053e0f",
        "name": "Decode Context",
        "func": "//check if request was originated from AnywherNow\nfor (var i = 0; i < msg.req.rawHeaders.length; i++) {\n    if (msg.req.rawHeaders[i] == 'https://attendant1.anywhere365.io/' || 'https://dr-attendant1.anywhere365.io/' ) {\n        msg.auth = true\n        break\n    }\n}\n\n\n//check if EMAIL was setup with Context of ACDC\nif(msg.payload.context == undefined) {\n    msg.auth = false\n} else {\n    msg.text = Buffer.from(msg.payload.user, 'base64').toString('utf-8');\n    let data = JSON.parse(msg.text);\n    msg.user = data.user.userName;\n}\n\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 240,
        "wires": [
            [
                "0ab4c31e738063f1"
            ]
        ]
    },
    {
        "id": "88e8b8443e45cc39",
        "type": "group",
        "z": "c7d463cf3de6d986",
        "name": "send result back",
        "style": {
            "fill": "#c8e7a7",
            "label": true,
            "color": "#000000",
            "label-position": "ne"
        },
        "nodes": [
            "af3f3cf572ba51c0",
            "5953109bb4531f5f"
        ],
        "x": 1174,
        "y": 419,
        "w": 312,
        "h": 82
    },
    {
        "id": "af3f3cf572ba51c0",
        "type": "http response",
        "z": "c7d463cf3de6d986",
        "g": "88e8b8443e45cc39",
        "name": "",
        "statusCode": "200",
        "headers": {},
        "x": 1400,
        "y": 460,
        "wires": []
    },
    {
        "id": "5953109bb4531f5f",
        "type": "function",
        "z": "c7d463cf3de6d986",
        "g": "88e8b8443e45cc39",
        "name": "Webseite",
        "func": "msg.payload = msg.calllist\nlet html = `\n<!DOCTYPE html>\n<html>\n<head>\n  <title>history</title>\n<style>\n  body { font-family: Arial, sans-serif; padding: 20px; font-size: 12px;}\n  table { border-collapse: collapse; width: 100%; margin-top: 20px; }\n  th, td { border: 1px solid #ccc; padding: 8px; text-align: left; }\n  th { background-color: #3399ff; color: white; }\n  tr:nth-child(even) { background-color: #f9f9f9; }\n</style>\n</head>\n<body>\n  <h2>Call History</h2>\n  <table>\n    <tr>\n      <th>Phone Number</th>\n      <th>Date / Time</th>\n      <th>Duration (in seconds)</th>\n    </tr>\n`;\n\nmsg.payload.forEach(call => {\n    html += `\n    <tr>\n      <td>${call.caller}</td>\n      <td>${call.starttime}</td>\n      <td>${call.talktime}</td>\n    </tr>\n  `;\n});\n\nhtml += `\n  </table>\n</body>\n</html>\n`;\n\nmsg.payload = html;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 460,
        "wires": [
            [
                "af3f3cf572ba51c0"
            ]
        ]
    }
]